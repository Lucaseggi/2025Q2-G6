services:
  localstack:
    build:
      context: ./00-localstack
      dockerfile: Dockerfile
    container_name: localstack
    ports:
      - "4566:4566"  # Main LocalStack port
    environment:
      - SERVICES=s3,sqs,secretsmanager  # S3 for cache, SQS for queues, Secrets Manager for secrets
      - DEBUG=1
      - DATA_DIR=/var/lib/localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - localstack-data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./00-localstack/init-aws-resources.sh:/etc/localstack/init/ready.d/init-aws-resources.sh
      - ./00-localstack/dev.env:/etc/localstack/init/ready.d/dev.env
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/localstack-initialized.txt"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 30s
    networks:
      - rag-network

  opensearch:
    build: ./07-vectorial-db
    container_name: opensearch-node
    env_file:
      - ./07-vectorial-db/.env
    environment:
      # Override memory settings for large datasets (~5GB expected)
      - "OPENSEARCH_JAVA_OPTS=-Xms4g -Xmx4g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - rag-network

  postgres:
    build: ./06-relational-db
    container_name: postgres-db
    environment:
      # Increase shared buffers and work memory for large datasets
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: >
      postgres
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c work_mem=64MB
      -c max_connections=200
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d simpla_rag"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rag-network

  scraper:
    build: ./01-scraper
    container_name: scraper
    ports:
      - "8003:8003"
    environment:
      # Only credentials needed to access Secrets Manager
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  purifier-api:
    build: ./02-purifier
    container_name: purifier-api
    ports:
      - "8004:8004"
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  purifier-worker:
    build: ./02-purifier
    command: ["python", "worker.py"]
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  processor-api:
    build: ./03-processor
    container_name: processor-api
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8005"]
    ports:
      - "8005:8005"
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  processor-worker:
    build: ./03-processor
    command: ["python", "worker.py"]
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  embedder-api:
    build: ./04-embedder
    container_name: embedder-api
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8001"]
    ports:
      - "8001:8001"
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  embedder-worker:
    build: ./04-embedder
    command: ["python", "worker.py"]
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  inserter:
    build: ./05-inserter
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRETS_MANAGER_ENDPOINT=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      relational-guard:
        condition: service_started
      vectorial-guard:
        condition: service_started
    restart: unless-stopped
    networks:
      - rag-network

  api:
    build: ./api
    container_name: api
    ports:
      - "8010:8000"
    env_file:
      - ./api/.env
    depends_on:
      opensearch:
        condition: service_healthy
      embedder-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - rag-network

  relational-guard:
    build:
      context: ./06-relational-guard
      args:
        MODE: api  # Options: grpc or api
    container_name: relational-guard
    ports:
      - "50051:50051"
      - "8090:8090"
    env_file:
      - ./06-relational-guard/.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  vectorial-guard:
    build:
      context: ./07-vectorial-guard
      args:
        MODE: api  # Options: grpc or api
    container_name: vectorial-guard
    ports:
      - "50052:50052"
      - "8080:8080"
    env_file:
      - ./07-vectorial-guard/.env
    depends_on:
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

  answer-generator:
    build: ./answer-generator
    container_name: answer-generator
    ports:
      - "8042:8042"
    environment:
      - SERVICE_PORT=8042
      - EMBEDDER_API_HOST=http://embedder-api:8001
      - VECTORIAL_API_HOST=http://vectorial-guard:8080
      - RELATIONAL_API_HOST=http://relational-guard:8090
      - DEFAULT_SEARCH_LIMIT=5
    depends_on:
      embedder-api:
        condition: service_started
      relational-guard:
        condition: service_started
      vectorial-guard:
        condition: service_started
    restart: unless-stopped
    networks:
      - rag-network

  # frontend:
  #   build: ./frontend
  #   container_name: frontend
  #   ports:
  #     - "5173:5173"
  #   env_file:
  #     - ./frontend/.env
  #   depends_on:
  #     api:
  #       condition: service_started
  #   restart: unless-stopped
  #   networks:
  #     - rag-network

volumes:
  localstack-data:
    driver: local
  opensearch-data:
    driver: local
  postgres-data:
    driver: local
  django-data:
    driver: local

networks:
  rag-network:
    name: simpla_data_extraction_rag-network
    driver: bridge