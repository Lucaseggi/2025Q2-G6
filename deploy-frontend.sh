#!/bin/bash
set -e

# Frontend Deployment Script for Simpla
# Builds React frontend and deploys to S3 static website

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_usage() {
    cat << EOF
Usage: ./deploy-frontend.sh [OPTIONS]

Build and deploy React frontend to S3 static website

OPTIONS:
  -h, --help    Show this help message

PREREQUISITES:
  1. Node.js and npm installed
  2. Terraform has been applied (S3 bucket exists)
  3. AWS CLI configured
  4. Running from project root directory

EXAMPLES:
  # Deploy frontend to S3
  ./deploy-frontend.sh

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print_usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            print_usage
            exit 1
            ;;
    esac
done

# Header
log_info "=========================================="
log_info "Simpla Frontend Deployment"
log_info "=========================================="
echo ""

# Check if we're in the right directory (project root)
if [ ! -d "frontend" ] || [ ! -d "terraform-lambda" ]; then
    log_error "Must be run from project root directory"
    log_error "Expected directories: ./frontend and ./terraform-lambda"
    exit 1
fi

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    log_error "Node.js is not installed"
    log_error "Please install Node.js from https://nodejs.org/"
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    log_error "npm is not installed"
    log_error "Please install npm (usually comes with Node.js)"
    exit 1
fi

# Step 1: Install dependencies
log_step "Step 1/5: Installing frontend dependencies..."
cd frontend

if [ ! -d "node_modules" ]; then
    log_info "node_modules not found, running npm install..."
    npm install
else
    log_info "node_modules found, skipping npm install"
    log_warn "Run 'npm install' manually if you need to update dependencies"
fi

log_info "✓ Dependencies ready"
echo ""

# Step 2: Configure API URL from Terraform
log_step "Step 2/5: Configuring API URL..."

# Get Answer Generator API URL from Terraform
cd ../terraform-lambda

# Check if terraform state exists
if [ ! -f "terraform.tfstate" ] && [ ! -f ".terraform/terraform.tfstate" ]; then
    log_warn "No Terraform state found"
    log_warn "Frontend will use default localhost:8010"
    ANSWER_GENERATOR_URL=""
else
    # Get API URL from Terraform output
    ANSWER_GENERATOR_URL=$(terraform output -raw answer_generator_api_url 2>/dev/null)

    if [ -z "$ANSWER_GENERATOR_URL" ] || [ "$ANSWER_GENERATOR_URL" = "null" ]; then
        log_warn "Could not retrieve Answer Generator API URL from Terraform"
        log_warn "Frontend will use default localhost:8010"
        ANSWER_GENERATOR_URL=""
    else
        log_info "Answer Generator API: $ANSWER_GENERATOR_URL"
    fi
fi

# Return to frontend directory
cd ../frontend

# Create .env file with API URL (if available)
if [ ! -z "$ANSWER_GENERATOR_URL" ]; then
    cat > .env << EOF
# Auto-generated by deploy-frontend.sh
# Answer Generator API Gateway endpoint
VITE_API_URL=$ANSWER_GENERATOR_URL
EOF
    log_info "✓ Created .env file with API URL"
else
    # Remove .env if it exists (to use default localhost)
    rm -f .env
    log_warn "No .env file created - using default configuration"
fi

echo ""

# Step 3: Build frontend
log_step "Step 3/5: Building React frontend..."
log_info "Running: npm run build"

npm run build

if [ ! -d "dist" ]; then
    log_error "Build failed: dist/ directory not created"
    exit 1
fi

log_info "✓ Frontend built successfully"
echo ""

# Step 4: Get S3 bucket name from Terraform
log_step "Step 4/5: Getting S3 bucket name from Terraform..."
cd ../terraform-lambda

# Check if terraform state exists
if [ ! -f "terraform.tfstate" ] && [ ! -f ".terraform/terraform.tfstate" ]; then
    log_error "No Terraform state found"
    log_error "Please run 'terraform apply' first to create the S3 bucket"
    exit 1
fi

# Get bucket name from Terraform output
BUCKET_NAME=$(terraform output -raw frontend_bucket_name 2>/dev/null)

if [ -z "$BUCKET_NAME" ] || [ "$BUCKET_NAME" = "null" ]; then
    log_error "Failed to get S3 bucket name from Terraform"
    log_error "Make sure you've applied the frontend-s3.tf configuration"
    log_error "Run: terraform apply"
    exit 1
fi

log_info "S3 Bucket: $BUCKET_NAME"
log_info "✓ Bucket name retrieved"
echo ""

# Step 5: Deploy to S3
log_step "Step 5/5: Deploying to S3..."
log_info "Syncing files to s3://$BUCKET_NAME/"

# Sync files to S3 (--delete removes files not in source)
aws s3 sync ../frontend/dist/ s3://$BUCKET_NAME/ --delete

if [ $? -ne 0 ]; then
    log_error "Failed to sync files to S3"
    log_error "Check AWS credentials and bucket permissions"
    exit 1
fi

log_info "✓ Files deployed to S3"
echo ""

# Get website URL
WEBSITE_URL=$(terraform output -raw frontend_website_url 2>/dev/null)

if [ -z "$WEBSITE_URL" ] || [ "$WEBSITE_URL" = "null" ]; then
    log_warn "Could not retrieve website URL from Terraform"
    WEBSITE_URL="http://$BUCKET_NAME.s3-website-$(terraform output -raw aws_region 2>/dev/null || echo 'us-east-1').amazonaws.com"
fi

# Success summary
log_info "=========================================="
log_info "Frontend Deployment Complete!"
log_info "=========================================="
log_info ""
log_info "Website URL: $WEBSITE_URL"
log_info "S3 Bucket:   $BUCKET_NAME"

# Show API URL if it was configured
if [ ! -z "$ANSWER_GENERATOR_URL" ]; then
    log_info "API URL:     $ANSWER_GENERATOR_URL"
fi

log_info ""
log_info "Next Steps:"
log_info "1. Open the website URL in your browser"
log_info "2. Test the frontend functionality"
if [ -z "$ANSWER_GENERATOR_URL" ]; then
    log_warn "3. Configure VITE_API_URL manually - API not auto-configured"
else
    log_info "3. API is configured and ready to use"
fi
log_info ""
log_info "To update frontend:"
log_info "  ./deploy-frontend.sh"
log_info ""
log_info "=========================================="
